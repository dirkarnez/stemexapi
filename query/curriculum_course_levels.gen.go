// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"github.com/dirkarnez/stemexapi/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newCurriculumCourseLevel(db *gorm.DB, opts ...gen.DOOption) curriculumCourseLevel {
	_curriculumCourseLevel := curriculumCourseLevel{}

	_curriculumCourseLevel.curriculumCourseLevelDo.UseDB(db, opts...)
	_curriculumCourseLevel.curriculumCourseLevelDo.UseModel(&model.CurriculumCourseLevel{})

	tableName := _curriculumCourseLevel.curriculumCourseLevelDo.TableName()
	_curriculumCourseLevel.ALL = field.NewAsterisk(tableName)
	_curriculumCourseLevel.ID = field.NewField(tableName, "id")
	_curriculumCourseLevel.CreatedAt = field.NewTime(tableName, "created_at")
	_curriculumCourseLevel.UpdatedAt = field.NewTime(tableName, "updated_at")
	_curriculumCourseLevel.DeletedAt = field.NewField(tableName, "deleted_at")
	_curriculumCourseLevel.Name = field.NewString(tableName, "name")
	_curriculumCourseLevel.IconID = field.NewField(tableName, "icon_id")
	_curriculumCourseLevel.Description = field.NewString(tableName, "description")
	_curriculumCourseLevel.CourseID = field.NewField(tableName, "course_id")
	_curriculumCourseLevel.Icon = curriculumCourseLevelBelongsToIcon{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Icon", "model.File"),
	}

	_curriculumCourseLevel.Course = curriculumCourseLevelBelongsToCourse{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Course", "model.CurriculumCourse"),
		Entry: struct {
			field.RelationField
			Icon struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Course.Entry", "model.CurriculumEntry"),
			Icon: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Course.Entry.Icon", "model.File"),
			},
		},
		CurriculumPlan: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Course.CurriculumPlan", "model.File"),
		},
	}

	_curriculumCourseLevel.fillFieldMap()

	return _curriculumCourseLevel
}

type curriculumCourseLevel struct {
	curriculumCourseLevelDo

	ALL         field.Asterisk
	ID          field.Field
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Name        field.String
	IconID      field.Field
	Description field.String
	CourseID    field.Field
	Icon        curriculumCourseLevelBelongsToIcon

	Course curriculumCourseLevelBelongsToCourse

	fieldMap map[string]field.Expr
}

func (c curriculumCourseLevel) Table(newTableName string) *curriculumCourseLevel {
	c.curriculumCourseLevelDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c curriculumCourseLevel) As(alias string) *curriculumCourseLevel {
	c.curriculumCourseLevelDo.DO = *(c.curriculumCourseLevelDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *curriculumCourseLevel) updateTableName(table string) *curriculumCourseLevel {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewField(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Name = field.NewString(table, "name")
	c.IconID = field.NewField(table, "icon_id")
	c.Description = field.NewString(table, "description")
	c.CourseID = field.NewField(table, "course_id")

	c.fillFieldMap()

	return c
}

func (c *curriculumCourseLevel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *curriculumCourseLevel) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["name"] = c.Name
	c.fieldMap["icon_id"] = c.IconID
	c.fieldMap["description"] = c.Description
	c.fieldMap["course_id"] = c.CourseID

}

func (c curriculumCourseLevel) clone(db *gorm.DB) curriculumCourseLevel {
	c.curriculumCourseLevelDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c curriculumCourseLevel) replaceDB(db *gorm.DB) curriculumCourseLevel {
	c.curriculumCourseLevelDo.ReplaceDB(db)
	return c
}

type curriculumCourseLevelBelongsToIcon struct {
	db *gorm.DB

	field.RelationField
}

func (a curriculumCourseLevelBelongsToIcon) Where(conds ...field.Expr) *curriculumCourseLevelBelongsToIcon {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a curriculumCourseLevelBelongsToIcon) WithContext(ctx context.Context) *curriculumCourseLevelBelongsToIcon {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a curriculumCourseLevelBelongsToIcon) Session(session *gorm.Session) *curriculumCourseLevelBelongsToIcon {
	a.db = a.db.Session(session)
	return &a
}

func (a curriculumCourseLevelBelongsToIcon) Model(m *model.CurriculumCourseLevel) *curriculumCourseLevelBelongsToIconTx {
	return &curriculumCourseLevelBelongsToIconTx{a.db.Model(m).Association(a.Name())}
}

type curriculumCourseLevelBelongsToIconTx struct{ tx *gorm.Association }

func (a curriculumCourseLevelBelongsToIconTx) Find() (result *model.File, err error) {
	return result, a.tx.Find(&result)
}

func (a curriculumCourseLevelBelongsToIconTx) Append(values ...*model.File) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a curriculumCourseLevelBelongsToIconTx) Replace(values ...*model.File) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a curriculumCourseLevelBelongsToIconTx) Delete(values ...*model.File) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a curriculumCourseLevelBelongsToIconTx) Clear() error {
	return a.tx.Clear()
}

func (a curriculumCourseLevelBelongsToIconTx) Count() int64 {
	return a.tx.Count()
}

type curriculumCourseLevelBelongsToCourse struct {
	db *gorm.DB

	field.RelationField

	Entry struct {
		field.RelationField
		Icon struct {
			field.RelationField
		}
	}
	CurriculumPlan struct {
		field.RelationField
	}
}

func (a curriculumCourseLevelBelongsToCourse) Where(conds ...field.Expr) *curriculumCourseLevelBelongsToCourse {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a curriculumCourseLevelBelongsToCourse) WithContext(ctx context.Context) *curriculumCourseLevelBelongsToCourse {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a curriculumCourseLevelBelongsToCourse) Session(session *gorm.Session) *curriculumCourseLevelBelongsToCourse {
	a.db = a.db.Session(session)
	return &a
}

func (a curriculumCourseLevelBelongsToCourse) Model(m *model.CurriculumCourseLevel) *curriculumCourseLevelBelongsToCourseTx {
	return &curriculumCourseLevelBelongsToCourseTx{a.db.Model(m).Association(a.Name())}
}

type curriculumCourseLevelBelongsToCourseTx struct{ tx *gorm.Association }

func (a curriculumCourseLevelBelongsToCourseTx) Find() (result *model.CurriculumCourse, err error) {
	return result, a.tx.Find(&result)
}

func (a curriculumCourseLevelBelongsToCourseTx) Append(values ...*model.CurriculumCourse) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a curriculumCourseLevelBelongsToCourseTx) Replace(values ...*model.CurriculumCourse) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a curriculumCourseLevelBelongsToCourseTx) Delete(values ...*model.CurriculumCourse) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a curriculumCourseLevelBelongsToCourseTx) Clear() error {
	return a.tx.Clear()
}

func (a curriculumCourseLevelBelongsToCourseTx) Count() int64 {
	return a.tx.Count()
}

type curriculumCourseLevelDo struct{ gen.DO }

type ICurriculumCourseLevelDo interface {
	gen.SubQuery
	Debug() ICurriculumCourseLevelDo
	WithContext(ctx context.Context) ICurriculumCourseLevelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICurriculumCourseLevelDo
	WriteDB() ICurriculumCourseLevelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICurriculumCourseLevelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICurriculumCourseLevelDo
	Not(conds ...gen.Condition) ICurriculumCourseLevelDo
	Or(conds ...gen.Condition) ICurriculumCourseLevelDo
	Select(conds ...field.Expr) ICurriculumCourseLevelDo
	Where(conds ...gen.Condition) ICurriculumCourseLevelDo
	Order(conds ...field.Expr) ICurriculumCourseLevelDo
	Distinct(cols ...field.Expr) ICurriculumCourseLevelDo
	Omit(cols ...field.Expr) ICurriculumCourseLevelDo
	Join(table schema.Tabler, on ...field.Expr) ICurriculumCourseLevelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICurriculumCourseLevelDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICurriculumCourseLevelDo
	Group(cols ...field.Expr) ICurriculumCourseLevelDo
	Having(conds ...gen.Condition) ICurriculumCourseLevelDo
	Limit(limit int) ICurriculumCourseLevelDo
	Offset(offset int) ICurriculumCourseLevelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICurriculumCourseLevelDo
	Unscoped() ICurriculumCourseLevelDo
	Create(values ...*model.CurriculumCourseLevel) error
	CreateInBatches(values []*model.CurriculumCourseLevel, batchSize int) error
	Save(values ...*model.CurriculumCourseLevel) error
	First() (*model.CurriculumCourseLevel, error)
	Take() (*model.CurriculumCourseLevel, error)
	Last() (*model.CurriculumCourseLevel, error)
	Find() ([]*model.CurriculumCourseLevel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CurriculumCourseLevel, err error)
	FindInBatches(result *[]*model.CurriculumCourseLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CurriculumCourseLevel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICurriculumCourseLevelDo
	Assign(attrs ...field.AssignExpr) ICurriculumCourseLevelDo
	Joins(fields ...field.RelationField) ICurriculumCourseLevelDo
	Preload(fields ...field.RelationField) ICurriculumCourseLevelDo
	FirstOrInit() (*model.CurriculumCourseLevel, error)
	FirstOrCreate() (*model.CurriculumCourseLevel, error)
	FindByPage(offset int, limit int) (result []*model.CurriculumCourseLevel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICurriculumCourseLevelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []model.CurriculumCourseLevel, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (c curriculumCourseLevelDo) FilterWithNameAndRole(name string, role string) (result []model.CurriculumCourseLevel, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM curriculum_course_levels WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c curriculumCourseLevelDo) Debug() ICurriculumCourseLevelDo {
	return c.withDO(c.DO.Debug())
}

func (c curriculumCourseLevelDo) WithContext(ctx context.Context) ICurriculumCourseLevelDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c curriculumCourseLevelDo) ReadDB() ICurriculumCourseLevelDo {
	return c.Clauses(dbresolver.Read)
}

func (c curriculumCourseLevelDo) WriteDB() ICurriculumCourseLevelDo {
	return c.Clauses(dbresolver.Write)
}

func (c curriculumCourseLevelDo) Session(config *gorm.Session) ICurriculumCourseLevelDo {
	return c.withDO(c.DO.Session(config))
}

func (c curriculumCourseLevelDo) Clauses(conds ...clause.Expression) ICurriculumCourseLevelDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c curriculumCourseLevelDo) Returning(value interface{}, columns ...string) ICurriculumCourseLevelDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c curriculumCourseLevelDo) Not(conds ...gen.Condition) ICurriculumCourseLevelDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c curriculumCourseLevelDo) Or(conds ...gen.Condition) ICurriculumCourseLevelDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c curriculumCourseLevelDo) Select(conds ...field.Expr) ICurriculumCourseLevelDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c curriculumCourseLevelDo) Where(conds ...gen.Condition) ICurriculumCourseLevelDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c curriculumCourseLevelDo) Order(conds ...field.Expr) ICurriculumCourseLevelDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c curriculumCourseLevelDo) Distinct(cols ...field.Expr) ICurriculumCourseLevelDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c curriculumCourseLevelDo) Omit(cols ...field.Expr) ICurriculumCourseLevelDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c curriculumCourseLevelDo) Join(table schema.Tabler, on ...field.Expr) ICurriculumCourseLevelDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c curriculumCourseLevelDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICurriculumCourseLevelDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c curriculumCourseLevelDo) RightJoin(table schema.Tabler, on ...field.Expr) ICurriculumCourseLevelDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c curriculumCourseLevelDo) Group(cols ...field.Expr) ICurriculumCourseLevelDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c curriculumCourseLevelDo) Having(conds ...gen.Condition) ICurriculumCourseLevelDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c curriculumCourseLevelDo) Limit(limit int) ICurriculumCourseLevelDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c curriculumCourseLevelDo) Offset(offset int) ICurriculumCourseLevelDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c curriculumCourseLevelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICurriculumCourseLevelDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c curriculumCourseLevelDo) Unscoped() ICurriculumCourseLevelDo {
	return c.withDO(c.DO.Unscoped())
}

func (c curriculumCourseLevelDo) Create(values ...*model.CurriculumCourseLevel) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c curriculumCourseLevelDo) CreateInBatches(values []*model.CurriculumCourseLevel, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c curriculumCourseLevelDo) Save(values ...*model.CurriculumCourseLevel) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c curriculumCourseLevelDo) First() (*model.CurriculumCourseLevel, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CurriculumCourseLevel), nil
	}
}

func (c curriculumCourseLevelDo) Take() (*model.CurriculumCourseLevel, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CurriculumCourseLevel), nil
	}
}

func (c curriculumCourseLevelDo) Last() (*model.CurriculumCourseLevel, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CurriculumCourseLevel), nil
	}
}

func (c curriculumCourseLevelDo) Find() ([]*model.CurriculumCourseLevel, error) {
	result, err := c.DO.Find()
	return result.([]*model.CurriculumCourseLevel), err
}

func (c curriculumCourseLevelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CurriculumCourseLevel, err error) {
	buf := make([]*model.CurriculumCourseLevel, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c curriculumCourseLevelDo) FindInBatches(result *[]*model.CurriculumCourseLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c curriculumCourseLevelDo) Attrs(attrs ...field.AssignExpr) ICurriculumCourseLevelDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c curriculumCourseLevelDo) Assign(attrs ...field.AssignExpr) ICurriculumCourseLevelDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c curriculumCourseLevelDo) Joins(fields ...field.RelationField) ICurriculumCourseLevelDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c curriculumCourseLevelDo) Preload(fields ...field.RelationField) ICurriculumCourseLevelDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c curriculumCourseLevelDo) FirstOrInit() (*model.CurriculumCourseLevel, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CurriculumCourseLevel), nil
	}
}

func (c curriculumCourseLevelDo) FirstOrCreate() (*model.CurriculumCourseLevel, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CurriculumCourseLevel), nil
	}
}

func (c curriculumCourseLevelDo) FindByPage(offset int, limit int) (result []*model.CurriculumCourseLevel, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c curriculumCourseLevelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c curriculumCourseLevelDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c curriculumCourseLevelDo) Delete(models ...*model.CurriculumCourseLevel) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *curriculumCourseLevelDo) withDO(do gen.Dao) *curriculumCourseLevelDo {
	c.DO = *do.(*gen.DO)
	return c
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"github.com/dirkarnez/stemexapi/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newCurriculumCourseInformationEntries(db *gorm.DB, opts ...gen.DOOption) curriculumCourseInformationEntries {
	_curriculumCourseInformationEntries := curriculumCourseInformationEntries{}

	_curriculumCourseInformationEntries.curriculumCourseInformationEntriesDo.UseDB(db, opts...)
	_curriculumCourseInformationEntries.curriculumCourseInformationEntriesDo.UseModel(&model.CurriculumCourseInformationEntries{})

	tableName := _curriculumCourseInformationEntries.curriculumCourseInformationEntriesDo.TableName()
	_curriculumCourseInformationEntries.ALL = field.NewAsterisk(tableName)
	_curriculumCourseInformationEntries.ID = field.NewField(tableName, "id")
	_curriculumCourseInformationEntries.CreatedAt = field.NewTime(tableName, "created_at")
	_curriculumCourseInformationEntries.UpdatedAt = field.NewTime(tableName, "updated_at")
	_curriculumCourseInformationEntries.DeletedAt = field.NewField(tableName, "deleted_at")
	_curriculumCourseInformationEntries.IconID = field.NewField(tableName, "icon_id")
	_curriculumCourseInformationEntries.Title = field.NewString(tableName, "title")
	_curriculumCourseInformationEntries.Content = field.NewString(tableName, "content")
	_curriculumCourseInformationEntries.EntryID = field.NewField(tableName, "entry_id")
	_curriculumCourseInformationEntries.Icon = curriculumCourseInformationEntriesBelongsToIcon{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Icon", "model.File"),
	}

	_curriculumCourseInformationEntries.Entry = curriculumCourseInformationEntriesBelongsToEntry{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Entry", "model.CurriculumEntry"),
		Icon: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Entry.Icon", "model.File"),
		},
		CurriculumPlan: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Entry.CurriculumPlan", "model.File"),
		},
	}

	_curriculumCourseInformationEntries.fillFieldMap()

	return _curriculumCourseInformationEntries
}

type curriculumCourseInformationEntries struct {
	curriculumCourseInformationEntriesDo

	ALL       field.Asterisk
	ID        field.Field
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	IconID    field.Field
	Title     field.String
	Content   field.String
	EntryID   field.Field
	Icon      curriculumCourseInformationEntriesBelongsToIcon

	Entry curriculumCourseInformationEntriesBelongsToEntry

	fieldMap map[string]field.Expr
}

func (c curriculumCourseInformationEntries) Table(newTableName string) *curriculumCourseInformationEntries {
	c.curriculumCourseInformationEntriesDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c curriculumCourseInformationEntries) As(alias string) *curriculumCourseInformationEntries {
	c.curriculumCourseInformationEntriesDo.DO = *(c.curriculumCourseInformationEntriesDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *curriculumCourseInformationEntries) updateTableName(table string) *curriculumCourseInformationEntries {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewField(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.IconID = field.NewField(table, "icon_id")
	c.Title = field.NewString(table, "title")
	c.Content = field.NewString(table, "content")
	c.EntryID = field.NewField(table, "entry_id")

	c.fillFieldMap()

	return c
}

func (c *curriculumCourseInformationEntries) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *curriculumCourseInformationEntries) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["icon_id"] = c.IconID
	c.fieldMap["title"] = c.Title
	c.fieldMap["content"] = c.Content
	c.fieldMap["entry_id"] = c.EntryID

}

func (c curriculumCourseInformationEntries) clone(db *gorm.DB) curriculumCourseInformationEntries {
	c.curriculumCourseInformationEntriesDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c curriculumCourseInformationEntries) replaceDB(db *gorm.DB) curriculumCourseInformationEntries {
	c.curriculumCourseInformationEntriesDo.ReplaceDB(db)
	return c
}

type curriculumCourseInformationEntriesBelongsToIcon struct {
	db *gorm.DB

	field.RelationField
}

func (a curriculumCourseInformationEntriesBelongsToIcon) Where(conds ...field.Expr) *curriculumCourseInformationEntriesBelongsToIcon {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a curriculumCourseInformationEntriesBelongsToIcon) WithContext(ctx context.Context) *curriculumCourseInformationEntriesBelongsToIcon {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a curriculumCourseInformationEntriesBelongsToIcon) Session(session *gorm.Session) *curriculumCourseInformationEntriesBelongsToIcon {
	a.db = a.db.Session(session)
	return &a
}

func (a curriculumCourseInformationEntriesBelongsToIcon) Model(m *model.CurriculumCourseInformationEntries) *curriculumCourseInformationEntriesBelongsToIconTx {
	return &curriculumCourseInformationEntriesBelongsToIconTx{a.db.Model(m).Association(a.Name())}
}

type curriculumCourseInformationEntriesBelongsToIconTx struct{ tx *gorm.Association }

func (a curriculumCourseInformationEntriesBelongsToIconTx) Find() (result *model.File, err error) {
	return result, a.tx.Find(&result)
}

func (a curriculumCourseInformationEntriesBelongsToIconTx) Append(values ...*model.File) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a curriculumCourseInformationEntriesBelongsToIconTx) Replace(values ...*model.File) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a curriculumCourseInformationEntriesBelongsToIconTx) Delete(values ...*model.File) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a curriculumCourseInformationEntriesBelongsToIconTx) Clear() error {
	return a.tx.Clear()
}

func (a curriculumCourseInformationEntriesBelongsToIconTx) Count() int64 {
	return a.tx.Count()
}

type curriculumCourseInformationEntriesBelongsToEntry struct {
	db *gorm.DB

	field.RelationField

	Icon struct {
		field.RelationField
	}
	CurriculumPlan struct {
		field.RelationField
	}
}

func (a curriculumCourseInformationEntriesBelongsToEntry) Where(conds ...field.Expr) *curriculumCourseInformationEntriesBelongsToEntry {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a curriculumCourseInformationEntriesBelongsToEntry) WithContext(ctx context.Context) *curriculumCourseInformationEntriesBelongsToEntry {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a curriculumCourseInformationEntriesBelongsToEntry) Session(session *gorm.Session) *curriculumCourseInformationEntriesBelongsToEntry {
	a.db = a.db.Session(session)
	return &a
}

func (a curriculumCourseInformationEntriesBelongsToEntry) Model(m *model.CurriculumCourseInformationEntries) *curriculumCourseInformationEntriesBelongsToEntryTx {
	return &curriculumCourseInformationEntriesBelongsToEntryTx{a.db.Model(m).Association(a.Name())}
}

type curriculumCourseInformationEntriesBelongsToEntryTx struct{ tx *gorm.Association }

func (a curriculumCourseInformationEntriesBelongsToEntryTx) Find() (result *model.CurriculumEntry, err error) {
	return result, a.tx.Find(&result)
}

func (a curriculumCourseInformationEntriesBelongsToEntryTx) Append(values ...*model.CurriculumEntry) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a curriculumCourseInformationEntriesBelongsToEntryTx) Replace(values ...*model.CurriculumEntry) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a curriculumCourseInformationEntriesBelongsToEntryTx) Delete(values ...*model.CurriculumEntry) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a curriculumCourseInformationEntriesBelongsToEntryTx) Clear() error {
	return a.tx.Clear()
}

func (a curriculumCourseInformationEntriesBelongsToEntryTx) Count() int64 {
	return a.tx.Count()
}

type curriculumCourseInformationEntriesDo struct{ gen.DO }

type ICurriculumCourseInformationEntriesDo interface {
	gen.SubQuery
	Debug() ICurriculumCourseInformationEntriesDo
	WithContext(ctx context.Context) ICurriculumCourseInformationEntriesDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICurriculumCourseInformationEntriesDo
	WriteDB() ICurriculumCourseInformationEntriesDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICurriculumCourseInformationEntriesDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICurriculumCourseInformationEntriesDo
	Not(conds ...gen.Condition) ICurriculumCourseInformationEntriesDo
	Or(conds ...gen.Condition) ICurriculumCourseInformationEntriesDo
	Select(conds ...field.Expr) ICurriculumCourseInformationEntriesDo
	Where(conds ...gen.Condition) ICurriculumCourseInformationEntriesDo
	Order(conds ...field.Expr) ICurriculumCourseInformationEntriesDo
	Distinct(cols ...field.Expr) ICurriculumCourseInformationEntriesDo
	Omit(cols ...field.Expr) ICurriculumCourseInformationEntriesDo
	Join(table schema.Tabler, on ...field.Expr) ICurriculumCourseInformationEntriesDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICurriculumCourseInformationEntriesDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICurriculumCourseInformationEntriesDo
	Group(cols ...field.Expr) ICurriculumCourseInformationEntriesDo
	Having(conds ...gen.Condition) ICurriculumCourseInformationEntriesDo
	Limit(limit int) ICurriculumCourseInformationEntriesDo
	Offset(offset int) ICurriculumCourseInformationEntriesDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICurriculumCourseInformationEntriesDo
	Unscoped() ICurriculumCourseInformationEntriesDo
	Create(values ...*model.CurriculumCourseInformationEntries) error
	CreateInBatches(values []*model.CurriculumCourseInformationEntries, batchSize int) error
	Save(values ...*model.CurriculumCourseInformationEntries) error
	First() (*model.CurriculumCourseInformationEntries, error)
	Take() (*model.CurriculumCourseInformationEntries, error)
	Last() (*model.CurriculumCourseInformationEntries, error)
	Find() ([]*model.CurriculumCourseInformationEntries, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CurriculumCourseInformationEntries, err error)
	FindInBatches(result *[]*model.CurriculumCourseInformationEntries, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CurriculumCourseInformationEntries) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICurriculumCourseInformationEntriesDo
	Assign(attrs ...field.AssignExpr) ICurriculumCourseInformationEntriesDo
	Joins(fields ...field.RelationField) ICurriculumCourseInformationEntriesDo
	Preload(fields ...field.RelationField) ICurriculumCourseInformationEntriesDo
	FirstOrInit() (*model.CurriculumCourseInformationEntries, error)
	FirstOrCreate() (*model.CurriculumCourseInformationEntries, error)
	FindByPage(offset int, limit int) (result []*model.CurriculumCourseInformationEntries, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICurriculumCourseInformationEntriesDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []model.CurriculumCourseInformationEntries, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (c curriculumCourseInformationEntriesDo) FilterWithNameAndRole(name string, role string) (result []model.CurriculumCourseInformationEntries, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM curriculum_course_information_entries WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c curriculumCourseInformationEntriesDo) Debug() ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.Debug())
}

func (c curriculumCourseInformationEntriesDo) WithContext(ctx context.Context) ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c curriculumCourseInformationEntriesDo) ReadDB() ICurriculumCourseInformationEntriesDo {
	return c.Clauses(dbresolver.Read)
}

func (c curriculumCourseInformationEntriesDo) WriteDB() ICurriculumCourseInformationEntriesDo {
	return c.Clauses(dbresolver.Write)
}

func (c curriculumCourseInformationEntriesDo) Session(config *gorm.Session) ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.Session(config))
}

func (c curriculumCourseInformationEntriesDo) Clauses(conds ...clause.Expression) ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c curriculumCourseInformationEntriesDo) Returning(value interface{}, columns ...string) ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c curriculumCourseInformationEntriesDo) Not(conds ...gen.Condition) ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c curriculumCourseInformationEntriesDo) Or(conds ...gen.Condition) ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c curriculumCourseInformationEntriesDo) Select(conds ...field.Expr) ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c curriculumCourseInformationEntriesDo) Where(conds ...gen.Condition) ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c curriculumCourseInformationEntriesDo) Order(conds ...field.Expr) ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c curriculumCourseInformationEntriesDo) Distinct(cols ...field.Expr) ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c curriculumCourseInformationEntriesDo) Omit(cols ...field.Expr) ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c curriculumCourseInformationEntriesDo) Join(table schema.Tabler, on ...field.Expr) ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c curriculumCourseInformationEntriesDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c curriculumCourseInformationEntriesDo) RightJoin(table schema.Tabler, on ...field.Expr) ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c curriculumCourseInformationEntriesDo) Group(cols ...field.Expr) ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c curriculumCourseInformationEntriesDo) Having(conds ...gen.Condition) ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c curriculumCourseInformationEntriesDo) Limit(limit int) ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c curriculumCourseInformationEntriesDo) Offset(offset int) ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c curriculumCourseInformationEntriesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c curriculumCourseInformationEntriesDo) Unscoped() ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.Unscoped())
}

func (c curriculumCourseInformationEntriesDo) Create(values ...*model.CurriculumCourseInformationEntries) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c curriculumCourseInformationEntriesDo) CreateInBatches(values []*model.CurriculumCourseInformationEntries, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c curriculumCourseInformationEntriesDo) Save(values ...*model.CurriculumCourseInformationEntries) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c curriculumCourseInformationEntriesDo) First() (*model.CurriculumCourseInformationEntries, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CurriculumCourseInformationEntries), nil
	}
}

func (c curriculumCourseInformationEntriesDo) Take() (*model.CurriculumCourseInformationEntries, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CurriculumCourseInformationEntries), nil
	}
}

func (c curriculumCourseInformationEntriesDo) Last() (*model.CurriculumCourseInformationEntries, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CurriculumCourseInformationEntries), nil
	}
}

func (c curriculumCourseInformationEntriesDo) Find() ([]*model.CurriculumCourseInformationEntries, error) {
	result, err := c.DO.Find()
	return result.([]*model.CurriculumCourseInformationEntries), err
}

func (c curriculumCourseInformationEntriesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CurriculumCourseInformationEntries, err error) {
	buf := make([]*model.CurriculumCourseInformationEntries, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c curriculumCourseInformationEntriesDo) FindInBatches(result *[]*model.CurriculumCourseInformationEntries, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c curriculumCourseInformationEntriesDo) Attrs(attrs ...field.AssignExpr) ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c curriculumCourseInformationEntriesDo) Assign(attrs ...field.AssignExpr) ICurriculumCourseInformationEntriesDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c curriculumCourseInformationEntriesDo) Joins(fields ...field.RelationField) ICurriculumCourseInformationEntriesDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c curriculumCourseInformationEntriesDo) Preload(fields ...field.RelationField) ICurriculumCourseInformationEntriesDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c curriculumCourseInformationEntriesDo) FirstOrInit() (*model.CurriculumCourseInformationEntries, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CurriculumCourseInformationEntries), nil
	}
}

func (c curriculumCourseInformationEntriesDo) FirstOrCreate() (*model.CurriculumCourseInformationEntries, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CurriculumCourseInformationEntries), nil
	}
}

func (c curriculumCourseInformationEntriesDo) FindByPage(offset int, limit int) (result []*model.CurriculumCourseInformationEntries, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c curriculumCourseInformationEntriesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c curriculumCourseInformationEntriesDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c curriculumCourseInformationEntriesDo) Delete(models ...*model.CurriculumCourseInformationEntries) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *curriculumCourseInformationEntriesDo) withDO(do gen.Dao) *curriculumCourseInformationEntriesDo {
	c.DO = *do.(*gen.DO)
	return c
}

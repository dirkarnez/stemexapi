// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"github.com/dirkarnez/stemexapi/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newUserActivity(db *gorm.DB, opts ...gen.DOOption) userActivity {
	_userActivity := userActivity{}

	_userActivity.userActivityDo.UseDB(db, opts...)
	_userActivity.userActivityDo.UseModel(&model.UserActivity{})

	tableName := _userActivity.userActivityDo.TableName()
	_userActivity.ALL = field.NewAsterisk(tableName)
	_userActivity.ID = field.NewField(tableName, "id")
	_userActivity.CreatedAt = field.NewTime(tableName, "created_at")
	_userActivity.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userActivity.DeletedAt = field.NewField(tableName, "deleted_at")
	_userActivity.UserID = field.NewField(tableName, "user_id")
	_userActivity.User = userActivityBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.User"),
		Role: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.Role", "model.Role"),
		},
	}

	_userActivity.fillFieldMap()

	return _userActivity
}

type userActivity struct {
	userActivityDo

	ALL       field.Asterisk
	ID        field.Field
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	UserID    field.Field
	User      userActivityBelongsToUser

	fieldMap map[string]field.Expr
}

func (u userActivity) Table(newTableName string) *userActivity {
	u.userActivityDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userActivity) As(alias string) *userActivity {
	u.userActivityDo.DO = *(u.userActivityDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userActivity) updateTableName(table string) *userActivity {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewField(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.UserID = field.NewField(table, "user_id")

	u.fillFieldMap()

	return u
}

func (u *userActivity) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userActivity) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["user_id"] = u.UserID

}

func (u userActivity) clone(db *gorm.DB) userActivity {
	u.userActivityDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userActivity) replaceDB(db *gorm.DB) userActivity {
	u.userActivityDo.ReplaceDB(db)
	return u
}

type userActivityBelongsToUser struct {
	db *gorm.DB

	field.RelationField

	Role struct {
		field.RelationField
	}
}

func (a userActivityBelongsToUser) Where(conds ...field.Expr) *userActivityBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userActivityBelongsToUser) WithContext(ctx context.Context) *userActivityBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userActivityBelongsToUser) Session(session *gorm.Session) *userActivityBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a userActivityBelongsToUser) Model(m *model.UserActivity) *userActivityBelongsToUserTx {
	return &userActivityBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type userActivityBelongsToUserTx struct{ tx *gorm.Association }

func (a userActivityBelongsToUserTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a userActivityBelongsToUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userActivityBelongsToUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userActivityBelongsToUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userActivityBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a userActivityBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type userActivityDo struct{ gen.DO }

type IUserActivityDo interface {
	gen.SubQuery
	Debug() IUserActivityDo
	WithContext(ctx context.Context) IUserActivityDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserActivityDo
	WriteDB() IUserActivityDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserActivityDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserActivityDo
	Not(conds ...gen.Condition) IUserActivityDo
	Or(conds ...gen.Condition) IUserActivityDo
	Select(conds ...field.Expr) IUserActivityDo
	Where(conds ...gen.Condition) IUserActivityDo
	Order(conds ...field.Expr) IUserActivityDo
	Distinct(cols ...field.Expr) IUserActivityDo
	Omit(cols ...field.Expr) IUserActivityDo
	Join(table schema.Tabler, on ...field.Expr) IUserActivityDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserActivityDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserActivityDo
	Group(cols ...field.Expr) IUserActivityDo
	Having(conds ...gen.Condition) IUserActivityDo
	Limit(limit int) IUserActivityDo
	Offset(offset int) IUserActivityDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserActivityDo
	Unscoped() IUserActivityDo
	Create(values ...*model.UserActivity) error
	CreateInBatches(values []*model.UserActivity, batchSize int) error
	Save(values ...*model.UserActivity) error
	First() (*model.UserActivity, error)
	Take() (*model.UserActivity, error)
	Last() (*model.UserActivity, error)
	Find() ([]*model.UserActivity, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserActivity, err error)
	FindInBatches(result *[]*model.UserActivity, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserActivity) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserActivityDo
	Assign(attrs ...field.AssignExpr) IUserActivityDo
	Joins(fields ...field.RelationField) IUserActivityDo
	Preload(fields ...field.RelationField) IUserActivityDo
	FirstOrInit() (*model.UserActivity, error)
	FirstOrCreate() (*model.UserActivity, error)
	FindByPage(offset int, limit int) (result []*model.UserActivity, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserActivityDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []model.UserActivity, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (u userActivityDo) FilterWithNameAndRole(name string, role string) (result []model.UserActivity, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM user_activities WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (u userActivityDo) Debug() IUserActivityDo {
	return u.withDO(u.DO.Debug())
}

func (u userActivityDo) WithContext(ctx context.Context) IUserActivityDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userActivityDo) ReadDB() IUserActivityDo {
	return u.Clauses(dbresolver.Read)
}

func (u userActivityDo) WriteDB() IUserActivityDo {
	return u.Clauses(dbresolver.Write)
}

func (u userActivityDo) Session(config *gorm.Session) IUserActivityDo {
	return u.withDO(u.DO.Session(config))
}

func (u userActivityDo) Clauses(conds ...clause.Expression) IUserActivityDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userActivityDo) Returning(value interface{}, columns ...string) IUserActivityDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userActivityDo) Not(conds ...gen.Condition) IUserActivityDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userActivityDo) Or(conds ...gen.Condition) IUserActivityDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userActivityDo) Select(conds ...field.Expr) IUserActivityDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userActivityDo) Where(conds ...gen.Condition) IUserActivityDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userActivityDo) Order(conds ...field.Expr) IUserActivityDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userActivityDo) Distinct(cols ...field.Expr) IUserActivityDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userActivityDo) Omit(cols ...field.Expr) IUserActivityDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userActivityDo) Join(table schema.Tabler, on ...field.Expr) IUserActivityDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userActivityDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserActivityDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userActivityDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserActivityDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userActivityDo) Group(cols ...field.Expr) IUserActivityDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userActivityDo) Having(conds ...gen.Condition) IUserActivityDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userActivityDo) Limit(limit int) IUserActivityDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userActivityDo) Offset(offset int) IUserActivityDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userActivityDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserActivityDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userActivityDo) Unscoped() IUserActivityDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userActivityDo) Create(values ...*model.UserActivity) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userActivityDo) CreateInBatches(values []*model.UserActivity, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userActivityDo) Save(values ...*model.UserActivity) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userActivityDo) First() (*model.UserActivity, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserActivity), nil
	}
}

func (u userActivityDo) Take() (*model.UserActivity, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserActivity), nil
	}
}

func (u userActivityDo) Last() (*model.UserActivity, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserActivity), nil
	}
}

func (u userActivityDo) Find() ([]*model.UserActivity, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserActivity), err
}

func (u userActivityDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserActivity, err error) {
	buf := make([]*model.UserActivity, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userActivityDo) FindInBatches(result *[]*model.UserActivity, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userActivityDo) Attrs(attrs ...field.AssignExpr) IUserActivityDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userActivityDo) Assign(attrs ...field.AssignExpr) IUserActivityDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userActivityDo) Joins(fields ...field.RelationField) IUserActivityDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userActivityDo) Preload(fields ...field.RelationField) IUserActivityDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userActivityDo) FirstOrInit() (*model.UserActivity, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserActivity), nil
	}
}

func (u userActivityDo) FirstOrCreate() (*model.UserActivity, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserActivity), nil
	}
}

func (u userActivityDo) FindByPage(offset int, limit int) (result []*model.UserActivity, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userActivityDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userActivityDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userActivityDo) Delete(models ...*model.UserActivity) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userActivityDo) withDO(do gen.Dao) *userActivityDo {
	u.DO = *do.(*gen.DO)
	return u
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                                    = new(Query)
	CurriculumCourse                     *curriculumCourse
	CurriculumCourseBlogEntries          *curriculumCourseBlogEntries
	CurriculumCourseLessonResourceType   *curriculumCourseLessonResourceType
	CurriculumCourseLevel                *curriculumCourseLevel
	CurriculumCourseLevelLesson          *curriculumCourseLevelLesson
	CurriculumCourseLevelLessonResources *curriculumCourseLevelLessonResources
	CurriculumCoursePrerequisites        *curriculumCoursePrerequisites
	CurriculumCourseYoutubeVideoEntries  *curriculumCourseYoutubeVideoEntries
	CurriculumEntry                      *curriculumEntry
	File                                 *file
	ParentUserActivating                 *parentUserActivating
	Role                                 *role
	User                                 *user
	UserActivity                         *userActivity
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	CurriculumCourse = &Q.CurriculumCourse
	CurriculumCourseBlogEntries = &Q.CurriculumCourseBlogEntries
	CurriculumCourseLessonResourceType = &Q.CurriculumCourseLessonResourceType
	CurriculumCourseLevel = &Q.CurriculumCourseLevel
	CurriculumCourseLevelLesson = &Q.CurriculumCourseLevelLesson
	CurriculumCourseLevelLessonResources = &Q.CurriculumCourseLevelLessonResources
	CurriculumCoursePrerequisites = &Q.CurriculumCoursePrerequisites
	CurriculumCourseYoutubeVideoEntries = &Q.CurriculumCourseYoutubeVideoEntries
	CurriculumEntry = &Q.CurriculumEntry
	File = &Q.File
	ParentUserActivating = &Q.ParentUserActivating
	Role = &Q.Role
	User = &Q.User
	UserActivity = &Q.UserActivity
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                                   db,
		CurriculumCourse:                     newCurriculumCourse(db, opts...),
		CurriculumCourseBlogEntries:          newCurriculumCourseBlogEntries(db, opts...),
		CurriculumCourseLessonResourceType:   newCurriculumCourseLessonResourceType(db, opts...),
		CurriculumCourseLevel:                newCurriculumCourseLevel(db, opts...),
		CurriculumCourseLevelLesson:          newCurriculumCourseLevelLesson(db, opts...),
		CurriculumCourseLevelLessonResources: newCurriculumCourseLevelLessonResources(db, opts...),
		CurriculumCoursePrerequisites:        newCurriculumCoursePrerequisites(db, opts...),
		CurriculumCourseYoutubeVideoEntries:  newCurriculumCourseYoutubeVideoEntries(db, opts...),
		CurriculumEntry:                      newCurriculumEntry(db, opts...),
		File:                                 newFile(db, opts...),
		ParentUserActivating:                 newParentUserActivating(db, opts...),
		Role:                                 newRole(db, opts...),
		User:                                 newUser(db, opts...),
		UserActivity:                         newUserActivity(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	CurriculumCourse                     curriculumCourse
	CurriculumCourseBlogEntries          curriculumCourseBlogEntries
	CurriculumCourseLessonResourceType   curriculumCourseLessonResourceType
	CurriculumCourseLevel                curriculumCourseLevel
	CurriculumCourseLevelLesson          curriculumCourseLevelLesson
	CurriculumCourseLevelLessonResources curriculumCourseLevelLessonResources
	CurriculumCoursePrerequisites        curriculumCoursePrerequisites
	CurriculumCourseYoutubeVideoEntries  curriculumCourseYoutubeVideoEntries
	CurriculumEntry                      curriculumEntry
	File                                 file
	ParentUserActivating                 parentUserActivating
	Role                                 role
	User                                 user
	UserActivity                         userActivity
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                                   db,
		CurriculumCourse:                     q.CurriculumCourse.clone(db),
		CurriculumCourseBlogEntries:          q.CurriculumCourseBlogEntries.clone(db),
		CurriculumCourseLessonResourceType:   q.CurriculumCourseLessonResourceType.clone(db),
		CurriculumCourseLevel:                q.CurriculumCourseLevel.clone(db),
		CurriculumCourseLevelLesson:          q.CurriculumCourseLevelLesson.clone(db),
		CurriculumCourseLevelLessonResources: q.CurriculumCourseLevelLessonResources.clone(db),
		CurriculumCoursePrerequisites:        q.CurriculumCoursePrerequisites.clone(db),
		CurriculumCourseYoutubeVideoEntries:  q.CurriculumCourseYoutubeVideoEntries.clone(db),
		CurriculumEntry:                      q.CurriculumEntry.clone(db),
		File:                                 q.File.clone(db),
		ParentUserActivating:                 q.ParentUserActivating.clone(db),
		Role:                                 q.Role.clone(db),
		User:                                 q.User.clone(db),
		UserActivity:                         q.UserActivity.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                                   db,
		CurriculumCourse:                     q.CurriculumCourse.replaceDB(db),
		CurriculumCourseBlogEntries:          q.CurriculumCourseBlogEntries.replaceDB(db),
		CurriculumCourseLessonResourceType:   q.CurriculumCourseLessonResourceType.replaceDB(db),
		CurriculumCourseLevel:                q.CurriculumCourseLevel.replaceDB(db),
		CurriculumCourseLevelLesson:          q.CurriculumCourseLevelLesson.replaceDB(db),
		CurriculumCourseLevelLessonResources: q.CurriculumCourseLevelLessonResources.replaceDB(db),
		CurriculumCoursePrerequisites:        q.CurriculumCoursePrerequisites.replaceDB(db),
		CurriculumCourseYoutubeVideoEntries:  q.CurriculumCourseYoutubeVideoEntries.replaceDB(db),
		CurriculumEntry:                      q.CurriculumEntry.replaceDB(db),
		File:                                 q.File.replaceDB(db),
		ParentUserActivating:                 q.ParentUserActivating.replaceDB(db),
		Role:                                 q.Role.replaceDB(db),
		User:                                 q.User.replaceDB(db),
		UserActivity:                         q.UserActivity.replaceDB(db),
	}
}

type queryCtx struct {
	CurriculumCourse                     ICurriculumCourseDo
	CurriculumCourseBlogEntries          ICurriculumCourseBlogEntriesDo
	CurriculumCourseLessonResourceType   ICurriculumCourseLessonResourceTypeDo
	CurriculumCourseLevel                ICurriculumCourseLevelDo
	CurriculumCourseLevelLesson          ICurriculumCourseLevelLessonDo
	CurriculumCourseLevelLessonResources ICurriculumCourseLevelLessonResourcesDo
	CurriculumCoursePrerequisites        ICurriculumCoursePrerequisitesDo
	CurriculumCourseYoutubeVideoEntries  ICurriculumCourseYoutubeVideoEntriesDo
	CurriculumEntry                      ICurriculumEntryDo
	File                                 IFileDo
	ParentUserActivating                 IParentUserActivatingDo
	Role                                 IRoleDo
	User                                 IUserDo
	UserActivity                         IUserActivityDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		CurriculumCourse:                     q.CurriculumCourse.WithContext(ctx),
		CurriculumCourseBlogEntries:          q.CurriculumCourseBlogEntries.WithContext(ctx),
		CurriculumCourseLessonResourceType:   q.CurriculumCourseLessonResourceType.WithContext(ctx),
		CurriculumCourseLevel:                q.CurriculumCourseLevel.WithContext(ctx),
		CurriculumCourseLevelLesson:          q.CurriculumCourseLevelLesson.WithContext(ctx),
		CurriculumCourseLevelLessonResources: q.CurriculumCourseLevelLessonResources.WithContext(ctx),
		CurriculumCoursePrerequisites:        q.CurriculumCoursePrerequisites.WithContext(ctx),
		CurriculumCourseYoutubeVideoEntries:  q.CurriculumCourseYoutubeVideoEntries.WithContext(ctx),
		CurriculumEntry:                      q.CurriculumEntry.WithContext(ctx),
		File:                                 q.File.WithContext(ctx),
		ParentUserActivating:                 q.ParentUserActivating.WithContext(ctx),
		Role:                                 q.Role.WithContext(ctx),
		User:                                 q.User.WithContext(ctx),
		UserActivity:                         q.UserActivity.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"github.com/dirkarnez/stemexapi/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newCurriculumCourse(db *gorm.DB, opts ...gen.DOOption) curriculumCourse {
	_curriculumCourse := curriculumCourse{}

	_curriculumCourse.curriculumCourseDo.UseDB(db, opts...)
	_curriculumCourse.curriculumCourseDo.UseModel(&model.CurriculumCourse{})

	tableName := _curriculumCourse.curriculumCourseDo.TableName()
	_curriculumCourse.ALL = field.NewAsterisk(tableName)
	_curriculumCourse.ID = field.NewField(tableName, "id")
	_curriculumCourse.CreatedAt = field.NewTime(tableName, "created_at")
	_curriculumCourse.UpdatedAt = field.NewTime(tableName, "updated_at")
	_curriculumCourse.DeletedAt = field.NewField(tableName, "deleted_at")
	_curriculumCourse.EntryID = field.NewField(tableName, "entry_id")
	_curriculumCourse.CurriculumPlanID = field.NewField(tableName, "curriculum_plan_id")
	_curriculumCourse.Entry = curriculumCourseBelongsToEntry{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Entry", "model.CurriculumEntry"),
		Icon: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Entry.Icon", "model.File"),
		},
	}

	_curriculumCourse.CurriculumPlan = curriculumCourseBelongsToCurriculumPlan{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("CurriculumPlan", "model.File"),
	}

	_curriculumCourse.fillFieldMap()

	return _curriculumCourse
}

type curriculumCourse struct {
	curriculumCourseDo

	ALL              field.Asterisk
	ID               field.Field
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	EntryID          field.Field
	CurriculumPlanID field.Field
	Entry            curriculumCourseBelongsToEntry

	CurriculumPlan curriculumCourseBelongsToCurriculumPlan

	fieldMap map[string]field.Expr
}

func (c curriculumCourse) Table(newTableName string) *curriculumCourse {
	c.curriculumCourseDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c curriculumCourse) As(alias string) *curriculumCourse {
	c.curriculumCourseDo.DO = *(c.curriculumCourseDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *curriculumCourse) updateTableName(table string) *curriculumCourse {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewField(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.EntryID = field.NewField(table, "entry_id")
	c.CurriculumPlanID = field.NewField(table, "curriculum_plan_id")

	c.fillFieldMap()

	return c
}

func (c *curriculumCourse) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *curriculumCourse) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["entry_id"] = c.EntryID
	c.fieldMap["curriculum_plan_id"] = c.CurriculumPlanID

}

func (c curriculumCourse) clone(db *gorm.DB) curriculumCourse {
	c.curriculumCourseDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c curriculumCourse) replaceDB(db *gorm.DB) curriculumCourse {
	c.curriculumCourseDo.ReplaceDB(db)
	return c
}

type curriculumCourseBelongsToEntry struct {
	db *gorm.DB

	field.RelationField

	Icon struct {
		field.RelationField
	}
}

func (a curriculumCourseBelongsToEntry) Where(conds ...field.Expr) *curriculumCourseBelongsToEntry {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a curriculumCourseBelongsToEntry) WithContext(ctx context.Context) *curriculumCourseBelongsToEntry {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a curriculumCourseBelongsToEntry) Session(session *gorm.Session) *curriculumCourseBelongsToEntry {
	a.db = a.db.Session(session)
	return &a
}

func (a curriculumCourseBelongsToEntry) Model(m *model.CurriculumCourse) *curriculumCourseBelongsToEntryTx {
	return &curriculumCourseBelongsToEntryTx{a.db.Model(m).Association(a.Name())}
}

type curriculumCourseBelongsToEntryTx struct{ tx *gorm.Association }

func (a curriculumCourseBelongsToEntryTx) Find() (result *model.CurriculumEntry, err error) {
	return result, a.tx.Find(&result)
}

func (a curriculumCourseBelongsToEntryTx) Append(values ...*model.CurriculumEntry) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a curriculumCourseBelongsToEntryTx) Replace(values ...*model.CurriculumEntry) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a curriculumCourseBelongsToEntryTx) Delete(values ...*model.CurriculumEntry) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a curriculumCourseBelongsToEntryTx) Clear() error {
	return a.tx.Clear()
}

func (a curriculumCourseBelongsToEntryTx) Count() int64 {
	return a.tx.Count()
}

type curriculumCourseBelongsToCurriculumPlan struct {
	db *gorm.DB

	field.RelationField
}

func (a curriculumCourseBelongsToCurriculumPlan) Where(conds ...field.Expr) *curriculumCourseBelongsToCurriculumPlan {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a curriculumCourseBelongsToCurriculumPlan) WithContext(ctx context.Context) *curriculumCourseBelongsToCurriculumPlan {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a curriculumCourseBelongsToCurriculumPlan) Session(session *gorm.Session) *curriculumCourseBelongsToCurriculumPlan {
	a.db = a.db.Session(session)
	return &a
}

func (a curriculumCourseBelongsToCurriculumPlan) Model(m *model.CurriculumCourse) *curriculumCourseBelongsToCurriculumPlanTx {
	return &curriculumCourseBelongsToCurriculumPlanTx{a.db.Model(m).Association(a.Name())}
}

type curriculumCourseBelongsToCurriculumPlanTx struct{ tx *gorm.Association }

func (a curriculumCourseBelongsToCurriculumPlanTx) Find() (result *model.File, err error) {
	return result, a.tx.Find(&result)
}

func (a curriculumCourseBelongsToCurriculumPlanTx) Append(values ...*model.File) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a curriculumCourseBelongsToCurriculumPlanTx) Replace(values ...*model.File) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a curriculumCourseBelongsToCurriculumPlanTx) Delete(values ...*model.File) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a curriculumCourseBelongsToCurriculumPlanTx) Clear() error {
	return a.tx.Clear()
}

func (a curriculumCourseBelongsToCurriculumPlanTx) Count() int64 {
	return a.tx.Count()
}

type curriculumCourseDo struct{ gen.DO }

type ICurriculumCourseDo interface {
	gen.SubQuery
	Debug() ICurriculumCourseDo
	WithContext(ctx context.Context) ICurriculumCourseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICurriculumCourseDo
	WriteDB() ICurriculumCourseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICurriculumCourseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICurriculumCourseDo
	Not(conds ...gen.Condition) ICurriculumCourseDo
	Or(conds ...gen.Condition) ICurriculumCourseDo
	Select(conds ...field.Expr) ICurriculumCourseDo
	Where(conds ...gen.Condition) ICurriculumCourseDo
	Order(conds ...field.Expr) ICurriculumCourseDo
	Distinct(cols ...field.Expr) ICurriculumCourseDo
	Omit(cols ...field.Expr) ICurriculumCourseDo
	Join(table schema.Tabler, on ...field.Expr) ICurriculumCourseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICurriculumCourseDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICurriculumCourseDo
	Group(cols ...field.Expr) ICurriculumCourseDo
	Having(conds ...gen.Condition) ICurriculumCourseDo
	Limit(limit int) ICurriculumCourseDo
	Offset(offset int) ICurriculumCourseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICurriculumCourseDo
	Unscoped() ICurriculumCourseDo
	Create(values ...*model.CurriculumCourse) error
	CreateInBatches(values []*model.CurriculumCourse, batchSize int) error
	Save(values ...*model.CurriculumCourse) error
	First() (*model.CurriculumCourse, error)
	Take() (*model.CurriculumCourse, error)
	Last() (*model.CurriculumCourse, error)
	Find() ([]*model.CurriculumCourse, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CurriculumCourse, err error)
	FindInBatches(result *[]*model.CurriculumCourse, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CurriculumCourse) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICurriculumCourseDo
	Assign(attrs ...field.AssignExpr) ICurriculumCourseDo
	Joins(fields ...field.RelationField) ICurriculumCourseDo
	Preload(fields ...field.RelationField) ICurriculumCourseDo
	FirstOrInit() (*model.CurriculumCourse, error)
	FirstOrCreate() (*model.CurriculumCourse, error)
	FindByPage(offset int, limit int) (result []*model.CurriculumCourse, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICurriculumCourseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []model.CurriculumCourse, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (c curriculumCourseDo) FilterWithNameAndRole(name string, role string) (result []model.CurriculumCourse, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM curriculum_courses WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c curriculumCourseDo) Debug() ICurriculumCourseDo {
	return c.withDO(c.DO.Debug())
}

func (c curriculumCourseDo) WithContext(ctx context.Context) ICurriculumCourseDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c curriculumCourseDo) ReadDB() ICurriculumCourseDo {
	return c.Clauses(dbresolver.Read)
}

func (c curriculumCourseDo) WriteDB() ICurriculumCourseDo {
	return c.Clauses(dbresolver.Write)
}

func (c curriculumCourseDo) Session(config *gorm.Session) ICurriculumCourseDo {
	return c.withDO(c.DO.Session(config))
}

func (c curriculumCourseDo) Clauses(conds ...clause.Expression) ICurriculumCourseDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c curriculumCourseDo) Returning(value interface{}, columns ...string) ICurriculumCourseDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c curriculumCourseDo) Not(conds ...gen.Condition) ICurriculumCourseDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c curriculumCourseDo) Or(conds ...gen.Condition) ICurriculumCourseDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c curriculumCourseDo) Select(conds ...field.Expr) ICurriculumCourseDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c curriculumCourseDo) Where(conds ...gen.Condition) ICurriculumCourseDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c curriculumCourseDo) Order(conds ...field.Expr) ICurriculumCourseDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c curriculumCourseDo) Distinct(cols ...field.Expr) ICurriculumCourseDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c curriculumCourseDo) Omit(cols ...field.Expr) ICurriculumCourseDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c curriculumCourseDo) Join(table schema.Tabler, on ...field.Expr) ICurriculumCourseDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c curriculumCourseDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICurriculumCourseDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c curriculumCourseDo) RightJoin(table schema.Tabler, on ...field.Expr) ICurriculumCourseDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c curriculumCourseDo) Group(cols ...field.Expr) ICurriculumCourseDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c curriculumCourseDo) Having(conds ...gen.Condition) ICurriculumCourseDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c curriculumCourseDo) Limit(limit int) ICurriculumCourseDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c curriculumCourseDo) Offset(offset int) ICurriculumCourseDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c curriculumCourseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICurriculumCourseDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c curriculumCourseDo) Unscoped() ICurriculumCourseDo {
	return c.withDO(c.DO.Unscoped())
}

func (c curriculumCourseDo) Create(values ...*model.CurriculumCourse) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c curriculumCourseDo) CreateInBatches(values []*model.CurriculumCourse, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c curriculumCourseDo) Save(values ...*model.CurriculumCourse) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c curriculumCourseDo) First() (*model.CurriculumCourse, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CurriculumCourse), nil
	}
}

func (c curriculumCourseDo) Take() (*model.CurriculumCourse, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CurriculumCourse), nil
	}
}

func (c curriculumCourseDo) Last() (*model.CurriculumCourse, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CurriculumCourse), nil
	}
}

func (c curriculumCourseDo) Find() ([]*model.CurriculumCourse, error) {
	result, err := c.DO.Find()
	return result.([]*model.CurriculumCourse), err
}

func (c curriculumCourseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CurriculumCourse, err error) {
	buf := make([]*model.CurriculumCourse, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c curriculumCourseDo) FindInBatches(result *[]*model.CurriculumCourse, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c curriculumCourseDo) Attrs(attrs ...field.AssignExpr) ICurriculumCourseDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c curriculumCourseDo) Assign(attrs ...field.AssignExpr) ICurriculumCourseDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c curriculumCourseDo) Joins(fields ...field.RelationField) ICurriculumCourseDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c curriculumCourseDo) Preload(fields ...field.RelationField) ICurriculumCourseDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c curriculumCourseDo) FirstOrInit() (*model.CurriculumCourse, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CurriculumCourse), nil
	}
}

func (c curriculumCourseDo) FirstOrCreate() (*model.CurriculumCourse, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CurriculumCourse), nil
	}
}

func (c curriculumCourseDo) FindByPage(offset int, limit int) (result []*model.CurriculumCourse, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c curriculumCourseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c curriculumCourseDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c curriculumCourseDo) Delete(models ...*model.CurriculumCourse) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *curriculumCourseDo) withDO(do gen.Dao) *curriculumCourseDo {
	c.DO = *do.(*gen.DO)
	return c
}

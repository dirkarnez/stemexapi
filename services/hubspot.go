package services

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"

	"github.com/samber/lo"
)

func hubspotHeader() http.Header {
	headers := http.Header{}
	headers.Add("Content-Type", "application/json")
	headers.Add("Authorization", "Bearer pat-na1-20d567d6-1d88-4e04-bf49-5c6d78c53c4d")
	return headers
}

// var animals []Animal
// err := json.Unmarshal(jsonBlob, &animals)

type B struct {
	Properties struct {
		NewCourseName string `json:"new_course_name"`
		HSObjectId    string `json:"hs_object_id"`
	} `json:"properties"`
}

type A struct {
	Results []B `json:"results"`
}

func SearchDealIDList(httpClient *http.Client, studentId string) (*A, error) {
	if len(strings.TrimSpace(studentId)) < 1 {
		return nil, fmt.Errorf("student id is nil or empty")
	}

	type Filter struct {
		PropertyName string `json:"propertyName"`
		Operator     string `json:"operator"`
		Value        string `json:"value"`
	}

	type FilterGroup struct {
		Filters []Filter `json:"filters"`
	}

	type Sort struct {
		PropertyName string `json:"propertyName"`
		Direction    string `json:"direction"`
	}

	type AutoGenerated struct {
		FilterGroups []FilterGroup `json:"filterGroups"`
		Properties   []string      `json:"properties"`
		Sorts        []Sort        `json:"sorts"`
	}

	data := AutoGenerated{
		FilterGroups: []FilterGroup{{Filters: []Filter{{PropertyName: "student_id", Operator: "EQ", Value: studentId}}}},
		Properties:   []string{"dealname", "student_id", "new_course_name", "course_dates", "zoom_link"},
		Sorts:        []Sort{{PropertyName: "createdate", Direction: "DESCENDING"}},
	}

	jsonValue, _ := json.Marshal(data)

	req, err := http.NewRequest("POST", `https://api.hubapi.com/crm/v3/objects/deals/search`, bytes.NewBuffer(jsonValue))
	if err != nil {
		return nil, err
	}
	req.Header = hubspotHeader()

	resp, err := httpClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	var a A
	err = json.Unmarshal(bytes, &a)
	if err != nil {
		return nil, err
	}

	return &a, nil
}

func AToDealIDList(a A) []string {
	return lo.Map(a.Results, func(node B, index int) string {
		return node.Properties.HSObjectId
	})
}

package services

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"strings"

	"github.com/antchfx/jsonquery"
	"github.com/samber/lo"
)

func hubspotHeader() http.Header {
	headers := http.Header{}
	headers.Add("Content-Type", "application/json")
	headers.Add("Authorization", "Bearer pat-na1-20d567d6-1d88-4e04-bf49-5c6d78c53c4d")
	return headers
}

func SearchDealIDList(httpClient *http.Client, studentId string) ([]string, error) {
	if len(strings.TrimSpace(studentId)) < 1 {
		return nil, fmt.Errorf("student id is nil or empty")
	}

	type Filter struct {
		PropertyName string `json:"propertyName"`
		Operator     string `json:"operator"`
		Value        string `json:"value"`
	}

	type FilterGroup struct {
		Filters []Filter `json:"filters"`
	}

	type Sort struct {
		PropertyName string `json:"propertyName"`
		Direction    string `json:"direction"`
	}

	type AutoGenerated struct {
		FilterGroups []FilterGroup `json:"filterGroups"`
		Properties   []string      `json:"properties"`
		Sorts        []Sort        `json:"sorts"`
	}

	data := AutoGenerated{
		FilterGroups: []FilterGroup{{Filters: []Filter{{PropertyName: "student_id", Operator: "EQ", Value: studentId}}}},
		Properties:   []string{"dealname", "student_id", "new_course_name", "course_dates", "zoom_link"},
		Sorts:        []Sort{{PropertyName: "createdate", Direction: "DESCENDING"}},
	}

	jsonValue, _ := json.Marshal(data)

	req, err := http.NewRequest("POST", `https://api.hubapi.com/crm/v3/objects/deals/search`, bytes.NewBuffer(jsonValue))
	if err != nil {
		return nil, err
	}
	req.Header = hubspotHeader()

	resp, err := httpClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	node, err := jsonquery.Parse(resp.Body)
	if err != nil {
		return nil, err
	}

	objectIDList, err := jsonquery.QueryAll(node, "/results/*/properties/hs_object_id")
	if err != nil {
		return nil, err
	}

	l := len(objectIDList)

	list := lo.Map(objectIDList, func(node *jsonquery.Node, index int) string {
		return node.Value().(string)
	})

	fmt.Println(l, list)

	return list, nil
}

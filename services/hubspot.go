package services

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"
)

func SearchDeal(httpClient *http.Client, studentId string) ([]byte, error) {
	if len(strings.TrimSpace(studentId)) < 1 {
		return nil, fmt.Errorf("student id is nil or empty")
	}

	type Filter struct {
		PropertyName string `json:"propertyName"`
		Operator     string `json:"operator"`
		Value        string `json:"value"`
	}

	type FilterGroup struct {
		Filters []Filter `json:"filters"`
	}

	type Sort struct {
		PropertyName string `json:"propertyName"`
		Direction    string `json:"direction"`
	}

	type AutoGenerated struct {
		FilterGroups []FilterGroup `json:"filterGroups"`
		Properties   []string      `json:"properties"`
		Sorts        []Sort        `json:"sorts"`
	}

	data := AutoGenerated{
		FilterGroups: []FilterGroup{{Filters: []Filter{{PropertyName: "student_id", Operator: "EQ", Value: studentId}}}},
		Properties:   []string{"dealname", "student_id", "new_course_name", "course_dates", "zoom_link"},
		Sorts:        []Sort{{PropertyName: "createdate", Direction: "DESCENDING"}},
	}

	jsonValue, _ := json.Marshal(data)

	req, err := http.NewRequest("POST", `https://api.hubapi.com/crm/v3/objects/deals/search`, bytes.NewBuffer(jsonValue))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer pat-na1-20d567d6-1d88-4e04-bf49-5c6d78c53c4d")

	resp, err := httpClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	return body, nil
}
